sum(unl.pred$V2 == -Inf)
compute.prob.matrix <- function(all_unl.disc, all_pos.disc, max.len){
u.N = dim(all_unl.disc)[2]
#probability matrices are constructed (empty at this stage)
u.prb = matrix(0, nrow=u.N, ncol=max.len)
p.prb = matrix(0, nrow=u.N, ncol=max.len)
dimnames(u.prb)[1] = dimnames(all_unl.disc)[2]
dimnames(p.prb)[1] = dimnames(all_pos.disc)[2]
#numbers are entered into the probability matrices, indicating the probability a given variable will have a given value.
for (k in 1:u.N)
for (j in 1:max.len) {
u.prb[k, j] = mean(all_unl.disc[,k] == j) # as the output from the equality is either True or False, computing the mean is the probability
p.prb[k, j] = mean(all_pos.disc[,k] == j)
}
return(u.prb, p.prb)
}
max.len = 1
for (k in 1:d.N) {
len = length(table(disc.data[,k]))
if (len > max.len) max.len <- len
}
print(max.len)
compute.prob.matrix <- function(all_unl.disc, all_pos.disc, max.len){
u.N = dim(all_unl.disc)[2]
#probability matrices are constructed (empty at this stage)
u.prb = matrix(0, nrow=u.N, ncol=max.len)
p.prb = matrix(0, nrow=u.N, ncol=max.len)
dimnames(u.prb)[1] = dimnames(all_unl.disc)[2]
dimnames(p.prb)[1] = dimnames(all_pos.disc)[2]
#numbers are entered into the probability matrices, indicating the probability a given variable will have a given value.
for (k in 1:u.N)
for (j in 1:max.len) {
u.prb[k, j] = mean(all_unl.disc[,k] == j) # as the output from the equality is either True or False, computing the mean is the probability
p.prb[k, j] = mean(all_pos.disc[,k] == j)
}
return(list(u.prb, p.prb))
}
compute.prob.matrix <- function(all_unl.disc, all_pos.disc, max.len){
u.N = dim(all_unl.disc)[2]
#probability matrices are constructed (empty at this stage)
u.prb = matrix(0, nrow=u.N, ncol=max.len)
p.prb = matrix(0, nrow=u.N, ncol=max.len)
dimnames(u.prb)[1] = dimnames(all_unl.disc)[2]
dimnames(p.prb)[1] = dimnames(all_pos.disc)[2]
#numbers are entered into the probability matrices, indicating the probability a given variable will have a given value.
for (k in 1:u.N)
for (j in 1:max.len) {
u.prb[k, j] = mean(all_unl.disc[,k] == j) # as the output from the equality is either True or False, computing the mean is the probability
p.prb[k, j] = mean(all_pos.disc[,k] == j)
}
return(list(u.prb, p.prb))
}
unlabelled = all_unl.disc
positive = all_pos.disc
max.len = max.len
prob_matrices = compute.prob.matrix(unlabelled, positive, max.len = max.len)
u.prb = prob_matrices[[1]]
p.prb = prob_matrices[[2]]
p.prb
data = all_unl.disc
# compute the scores for each uORF, in fact they are probability ratios
# but we use them as scores
prob.ratios = n.Bayes.score(data, u.prb, p.prb, prior)
head(prob.ratios)
# store the scores into a dataframe and sort them in the proper order
uORFs.ratio = data.frame(prob.ratios)
rownames(uORFs.ratio) <- rownames(data)
head(uORFs.ratio)
rownames(uORFs.ratio) == 1:102326
rownames(data)
#                                         where labelled and unlabelled were together
uORFs.ratio[,2] <- prob.ratios				# To keep rownames when I sort the data frame
head(uORFs.ratio)
# sort the uORFs according to the scores, and put them into a dataframe
b = uORFs.ratio[order(-uORFs.ratio[,1]),]
head(b)
sorted.scores = data.frame(b[,1])
head(sorted.scores)
rownames(sorted.scores) <- rownames(b)
head(sorted.scores)
b$V2<-c()999999
b$V2<-c()
sorted.scores == b
sum(sorted.scores == b)
# store the scores into a dataframe and sort them in the proper order
uORFs.ratio = data.frame(prob.ratios)
rownames(uORFs.ratio) <- rownames(data) # these are the rownames from the initial data matrix
# sort the uORFs according to the scores, and put them into a dataframe
b1 = uORFs.ratio[order(-uORFs.ratio[,1]),]
#                                         where labelled and unlabelled were together
uORFs.ratio[,2] <- prob.ratios				# To keep rownames when I sort the data frame
# sort the uORFs according to the scores, and put them into a dataframe
b1 = uORFs.ratio[order(-uORFs.ratio[,1]),]
# store the scores into a dataframe and sort them in the proper order
uORFs.ratio = data.frame(prob.ratios)
rownames(uORFs.ratio) <- rownames(data) # these are the rownames from the initial data matrix
# sort the uORFs according to the scores, and put them into a dataframe
b1 = uORFs.ratio[order(-uORFs.ratio[,1]),]
head(b1)9
head(b1)
# store the scores into a dataframe and sort them in the proper order
uORFs.ratio = data.frame(prob.ratios)
rownames(uORFs.ratio) <- rownames(data) # these are the rownames from the initial data matrix
#                                         where labelled and unlabelled were together
uORFs.ratio[,2] <- prob.ratios				# To keep rownames when I sort the data frame
# sort the uORFs according to the scores, and put them into a dataframe
b1 = uORFs.ratio[order(-uORFs.ratio[,1]),]
head(b1)
b1$v2<-c()
head(b1)
b1$V2<-c()
head(b1)
uORFs.ratio = data.frame(prob.ratios)
rownames(uORFs.ratio) <- rownames(data) # these are the rownames from the initial data matrix
#                                         where labelled and unlabelled were together
uORFs.ratio[,2] <- prob.ratios				# To keep rownames when I sort the data frame
# sort the uORFs according to the scores, and put them into a dataframe
b = uORFs.ratio[order(-uORFs.ratio[,1]),]
sorted.scores = data.frame(b[,1])
rownames(sorted.scores) <- rownames(b)
head(sorted.scores)
positive_scored <- sorted.scores[sorted.scores[,1] > 0,]
positive_scored <- b[b[,1] > 0,]
head( positive_scored)
quantile(positive_scored[,1], 0.95)
names_data <- rownames(data)
names_unlabelled <- rownames(unlabelled)
names_unlabelled_chosen_positives <- c()
threshold_positive <- quantile(positive_scored[,1], 0.95)
rownames(sorted.scores)[positive_scored[,1] > threshold_positive]
rownames(sorted.scores)[sorted.scores[,1] > threshold_positive]
names_unlabelled_chosen_positives <- c(names_unlabelled_chosen_positives,
rownames(sorted.scores)[sorted.scores[,1] > threshold_positive])
setdiff(names_unlabelled, names_unlabelled_chosen_positives)
length(setdiff(names_unlabelled, names_unlabelled_chosen_positives))
length(names_unlabelled_chosen_positives)
length(names_unlabelled)
names_unlabelled <- setdiff(names_unlabelled, names_unlabelled_chosen_positives)
it_unlabelled <- unlabelled[names_unlabelled]
it_unlabelled <- unlabelled[names_unlabelled,]
unlabelled = all_unl.disc
it_unlabelled <- unlabelled
it_unlabelled <- it_unlabelled[names_unlabelled,]
compare.prob.matrix <- function(u.prb, p.prb){
u.N = dim(all_unl.disc)[1] # number of variables
u.M = dim(all_unl.disc)[2] # number of possible values
total_diff <- 0
# compare the values for each cell in both matrices
for (k in 1:u.N)
for (j in 1:max.len) {
total_diff <- total_diff + abs(u.prb[k, j] - p.prb[k, j])
}
return(total_diff)
}
new_difference <- compare.prob.matrix(u.prb, p.prb)
compare.prob.matrix <- function(u.prb, p.prb){
u.N = dim(u.prb)[1] # number of variables
u.M = dim(u.prb)[2] # number of possible values
total_diff <- 0
# compare the values for each cell in both matrices
for (k in 1:u.N)
for (j in 1:max.len) {
total_diff <- total_diff + abs(u.prb[k, j] - p.prb[k, j])
}
return(total_diff)
}
new_difference <- compare.prob.matrix(u.prb, p.prb)
print(new_difference)
return(total_diff)
compare.prob.matrix <- function(u.prb, p.prb){
u.N = dim(u.prb)[1] # number of variables
u.M = dim(u.prb)[2] # number of possible values
total_diff <- 0
# compare the values for each cell in both matrices
for (k in 1:u.N) {
for (j in 1:max.len) {
total_diff <- total_diff + abs(u.prb[k, j] - p.prb[k, j])
}
}
return(total_diff)
}
new_difference <- compare.prob.matrix(u.prb, p.prb)
print(new_difference)
for (i in 1:4){
prob_matrices = compute.prob.matrix(it_unlabelled, positive, max.len = max.len)
u.prb = prob_matrices[[1]]
p.prb = prob_matrices[[2]]
# compute the scores for each uORF, in fact they are probability ratios
# but we use them as scores
prob.ratios = n.Bayes.score(data, u.prb, p.prb, prior)
# store the scores into a dataframe and sort them in the proper order
uORFs.ratio = data.frame(prob.ratios)
rownames(uORFs.ratio) <- rownames(data) # these are the rownames from the initial data matrix
#                                         where labelled and unlabelled were together
uORFs.ratio[,2] <- prob.ratios				# To keep rownames when I sort the data frame
# sort the uORFs according to the scores, and put them into a dataframe
b = uORFs.ratio[order(-uORFs.ratio[,1]),]
sorted.scores = data.frame(b[,1])
rownames(sorted.scores) <- rownames(b)
positive_scored <- b[b[,1] > 0,]
threshold_positive <- quantile(positive_scored[,1], 0.95)
names_unlabelled_chosen_positives <- c(names_unlabelled_chosen_positives,
rownames(sorted.scores)[sorted.scores[,1] > threshold_positive])
names_unlabelled <- setdiff(names_unlabelled, names_unlabelled_chosen_positives)
it_unlabelled <- it_unlabelled[names_unlabelled,]
new_difference <- compare.prob.matrix(u.prb, p.prb)
print(new_difference)
if (new_difference < diff_between_matrices){
break
} else {
diff_between_matrices <- new_difference
}
}
diff_between_matrices <- 0
for (i in 1:4){
prob_matrices = compute.prob.matrix(it_unlabelled, positive, max.len = max.len)
u.prb = prob_matrices[[1]]
p.prb = prob_matrices[[2]]
print("Matrices computed")
# compute the scores for each uORF, in fact they are probability ratios
# but we use them as scores
prob.ratios = n.Bayes.score(data, u.prb, p.prb, prior)
print("Scores computed")
# store the scores into a dataframe and sort them in the proper order
uORFs.ratio = data.frame(prob.ratios)
rownames(uORFs.ratio) <- rownames(data) # these are the rownames from the initial data matrix
#                                         where labelled and unlabelled were together
uORFs.ratio[,2] <- prob.ratios				# To keep rownames when I sort the data frame
# sort the uORFs according to the scores, and put them into a dataframe
b = uORFs.ratio[order(-uORFs.ratio[,1]),]
sorted.scores = data.frame(b[,1])
rownames(sorted.scores) <- rownames(b)
print("uORFs sorted")
positive_scored <- b[b[,1] > 0,]
threshold_positive <- quantile(positive_scored[,1], 0.95)
names_unlabelled_chosen_positives <- c(names_unlabelled_chosen_positives,
rownames(sorted.scores)[sorted.scores[,1] > threshold_positive])
names_unlabelled <- setdiff(names_unlabelled, names_unlabelled_chosen_positives)
it_unlabelled <- it_unlabelled[names_unlabelled,]
print("Unlabelled filtered")
new_difference <- compare.prob.matrix(u.prb, p.prb)
print("The new difference is")
print(new_difference)
if (new_difference < diff_between_matrices){
break
} else {
diff_between_matrices <- new_difference
}
}
data = all_unl.disc
unlabelled = all_unl.disc
positive = all_pos.disc
max.len = max.len
names_unlabelled <- rownames(unlabelled)
names_unlabelled_chosen_positives <- c()
it_unlabelled <- unlabelled
diff_between_matrices <- 0
for (i in 1:4){
prob_matrices = compute.prob.matrix(it_unlabelled, positive, max.len = max.len)
u.prb = prob_matrices[[1]]
p.prb = prob_matrices[[2]]
print("Matrices computed")
# compute the scores for each uORF, in fact they are probability ratios
# but we use them as scores
prob.ratios = n.Bayes.score(data, u.prb, p.prb, prior)
print("Scores computed")
# store the scores into a dataframe and sort them in the proper order
uORFs.ratio = data.frame(prob.ratios)
rownames(uORFs.ratio) <- rownames(data) # these are the rownames from the initial data matrix
#                                         where labelled and unlabelled were together
uORFs.ratio[,2] <- prob.ratios				# To keep rownames when I sort the data frame
# sort the uORFs according to the scores, and put them into a dataframe
b = uORFs.ratio[order(-uORFs.ratio[,1]),]
sorted.scores = data.frame(b[,1])
rownames(sorted.scores) <- rownames(b)
print("uORFs sorted")
positive_scored <- b[b[,1] > 0,]
threshold_positive <- quantile(positive_scored[,1], 0.9)
names_unlabelled_chosen_positives <- c(names_unlabelled_chosen_positives,
rownames(sorted.scores)[sorted.scores[,1] > threshold_positive])
names_unlabelled <- setdiff(names_unlabelled, names_unlabelled_chosen_positives)
it_unlabelled <- it_unlabelled[names_unlabelled,]
print("Unlabelled filtered")
new_difference <- compare.prob.matrix(u.prb, p.prb)
print("The new difference is")
print(new_difference)
if (new_difference < diff_between_matrices){
break
} else {
diff_between_matrices <- new_difference
}
}
data = all_unl.disc
unlabelled = all_unl.disc
positive = all_pos.disc
max.len = max.len
names_unlabelled <- rownames(unlabelled)
names_unlabelled_chosen_positives <- c()
it_unlabelled <- unlabelled
diff_between_matrices <- 0
for (i in 1:10){
prob_matrices = compute.prob.matrix(it_unlabelled, positive, max.len = max.len)
u.prb = prob_matrices[[1]]
p.prb = prob_matrices[[2]]
print("Matrices computed")
# compute the scores for each uORF, in fact they are probability ratios
# but we use them as scores
prob.ratios = n.Bayes.score(data, u.prb, p.prb, prior)
print("Scores computed")
# store the scores into a dataframe and sort them in the proper order
uORFs.ratio = data.frame(prob.ratios)
rownames(uORFs.ratio) <- rownames(data) # these are the rownames from the initial data matrix
#                                         where labelled and unlabelled were together
uORFs.ratio[,2] <- prob.ratios				# To keep rownames when I sort the data frame
# sort the uORFs according to the scores, and put them into a dataframe
b = uORFs.ratio[order(-uORFs.ratio[,1]),]
sorted.scores = data.frame(b[,1])
rownames(sorted.scores) <- rownames(b)
print("uORFs sorted")
positive_scored <- b[b[,1] > 0,]
threshold_positive <- quantile(positive_scored[,1], 0.9)
names_unlabelled_chosen_positives <- c(names_unlabelled_chosen_positives,
rownames(sorted.scores)[sorted.scores[,1] > threshold_positive])
names_unlabelled <- setdiff(names_unlabelled, names_unlabelled_chosen_positives)
it_unlabelled <- it_unlabelled[names_unlabelled,]
print("Unlabelled filtered")
new_difference <- compare.prob.matrix(u.prb, p.prb)
print("The new difference is")
print(new_difference)
if (new_difference < diff_between_matrices){
break
} else {
diff_between_matrices <- new_difference
}
}
data = all_unl.disc
unlabelled = all_unl.disc
positive = all_pos.disc
max.len = max.len
names_unlabelled <- rownames(unlabelled)
names_unlabelled_chosen_positives <- c()
it_unlabelled <- unlabelled
diff_between_matrices <- 0
for (i in 1:10){
prob_matrices = compute.prob.matrix(it_unlabelled, positive, max.len = max.len)
u.prb = prob_matrices[[1]]
p.prb = prob_matrices[[2]]
print("Matrices computed")
# compute the scores for each uORF, in fact they are probability ratios
# but we use them as scores
prob.ratios = n.Bayes.score(data, u.prb, p.prb, prior)
print("Scores computed")
# store the scores into a dataframe and sort them in the proper order
uORFs.ratio = data.frame(prob.ratios)
rownames(uORFs.ratio) <- rownames(data) # these are the rownames from the initial data matrix
#                                         where labelled and unlabelled were together
uORFs.ratio[,2] <- prob.ratios				# To keep rownames when I sort the data frame
# sort the uORFs according to the scores, and put them into a dataframe
b = uORFs.ratio[order(-uORFs.ratio[,1]),]
sorted.scores = data.frame(b[,1])
rownames(sorted.scores) <- rownames(b)
print("uORFs sorted")
positive_scored <- b[b[,1] > 0,]
threshold_positive <- quantile(positive_scored[,1], 0.9)
names_unlabelled_chosen_positives <- c(names_unlabelled_chosen_positives,
rownames(sorted.scores)[sorted.scores[,1] > threshold_positive])
print(paste("chosen_positive", length(names_unlabelled_chosen_positives)))
names_unlabelled <- setdiff(names_unlabelled, names_unlabelled_chosen_positives)
print(paste("Unlabelled", length(names_unlabelled)))
it_unlabelled <- it_unlabelled[names_unlabelled,]
print("Unlabelled filtered")
new_difference <- compare.prob.matrix(u.prb, p.prb)
print("The new difference is")
print(new_difference)
if (new_difference < diff_between_matrices){
break
} else {
diff_between_matrices <- new_difference
}
}
data = all_unl.disc
unlabelled = all_unl.disc
positive = all_pos.disc
max.len = max.len
names_unlabelled <- rownames(unlabelled)
names_unlabelled_chosen_positives <- c()
it_unlabelled <- unlabelled
diff_between_matrices <- 0
for (i in 1:10){
prob_matrices = compute.prob.matrix(it_unlabelled, positive, max.len = max.len)
u.prb = prob_matrices[[1]]
p.prb = prob_matrices[[2]]
print("Matrices computed")
# compute the scores for each uORF, in fact they are probability ratios
# but we use them as scores
prob.ratios = n.Bayes.score(it_unlabelled, u.prb, p.prb, prior)
print("Scores computed")
# store the scores into a dataframe and sort them in the proper order
uORFs.ratio = data.frame(prob.ratios)
rownames(uORFs.ratio) <- rownames(data) # these are the rownames from the initial data matrix
#                                         where labelled and unlabelled were together
uORFs.ratio[,2] <- prob.ratios				# To keep rownames when I sort the data frame
# sort the uORFs according to the scores, and put them into a dataframe
b = uORFs.ratio[order(-uORFs.ratio[,1]),]
sorted.scores = data.frame(b[,1])
rownames(sorted.scores) <- rownames(b)
print("uORFs sorted")
positive_scored <- b[b[,1] > 0,]
threshold_positive <- quantile(positive_scored[,1], 0.9)
names_unlabelled_chosen_positives <- c(names_unlabelled_chosen_positives,
rownames(sorted.scores)[sorted.scores[,1] > threshold_positive])
print(paste("chosen_positive", length(names_unlabelled_chosen_positives)))
names_unlabelled <- setdiff(names_unlabelled, names_unlabelled_chosen_positives)
print(paste("Unlabelled", length(names_unlabelled)))
it_unlabelled <- it_unlabelled[names_unlabelled,]
print("Unlabelled filtered")
new_difference <- compare.prob.matrix(u.prb, p.prb)
print("The new difference is")
print(new_difference)
if (new_difference < diff_between_matrices){
break
} else {
diff_between_matrices <- new_difference
}
}
data = all_unl.disc
unlabelled = all_unl.disc
positive = all_pos.disc
max.len = max.len
names_unlabelled <- rownames(unlabelled)
names_unlabelled_chosen_positives <- c()
it_unlabelled <- unlabelled
diff_between_matrices <- 0
for (i in 1:10){
prob_matrices = compute.prob.matrix(it_unlabelled, positive, max.len = max.len)
u.prb = prob_matrices[[1]]
p.prb = prob_matrices[[2]]
print("Matrices computed")
# compute the scores for each uORF, in fact they are probability ratios
# but we use them as scores
prob.ratios = n.Bayes.score(it_unlabelled, u.prb, p.prb, prior)
print("Scores computed")
# store the scores into a dataframe and sort them in the proper order
uORFs.ratio = data.frame(prob.ratios)
rownames(uORFs.ratio) <- rownames(it_unlabelled) # these are the rownames from the initial data matrix
#                                         where labelled and unlabelled were together
uORFs.ratio[,2] <- prob.ratios				# To keep rownames when I sort the data frame
# sort the uORFs according to the scores, and put them into a dataframe
b = uORFs.ratio[order(-uORFs.ratio[,1]),]
sorted.scores = data.frame(b[,1])
rownames(sorted.scores) <- rownames(b)
print("uORFs sorted")
positive_scored <- b[b[,1] > 0,]
threshold_positive <- quantile(positive_scored[,1], 0.9)
names_unlabelled_chosen_positives <- c(names_unlabelled_chosen_positives,
rownames(sorted.scores)[sorted.scores[,1] > threshold_positive])
print(paste("chosen_positive", length(names_unlabelled_chosen_positives)))
names_unlabelled <- setdiff(names_unlabelled, names_unlabelled_chosen_positives)
print(paste("Unlabelled", length(names_unlabelled)))
it_unlabelled <- it_unlabelled[names_unlabelled,]
print("Unlabelled filtered")
new_difference <- compare.prob.matrix(u.prb, p.prb)
print("The new difference is")
print(new_difference)
if (new_difference < diff_between_matrices){
break
} else {
diff_between_matrices <- new_difference
}
}
print("Unlabelled \"purification\" finished")
unl1.pred.file = write.predictions(all_unl.disc, u.prb, p.prb, prior, filename=paste("1uORF_function_unlabeled_predictions_sorted_discretized_", date(), sep=''))
pos1.pred.file = write.predictions(all_pos.disc, u.prb, p.prb, prior, filename=paste("1uORF_function_positive_predictions_sorted_discretized_", date(), sep=''))
unl.pred = read.table(unl1.pred.file, header=FALSE,sep="\t",comment.char="", quote="") # predictions for the unlabelled uORFs
pos.pred = read.table(pos1.pred.file, header=FALSE,sep="\t",comment.char="", quote="") # predictions for the positive uORFs
getwd()
# Save this plots in the plots folder
setwd(analysis_home)
setwd("./plots/")
unl.pred$V2 = check_inf(unl.pred$V2)
pos.pred$V2 = check_inf(pos.pred$V2)
# sample 10000 uORFs from the whole set of unlabelled uORFs predictions
unl.pred.samp = unl.pred[sample(1:length(as.matrix(unl.pred[,1])),10000),]
library("ROCR")
# bind the set of predictions for the positive uORFs with the sample of unlabelled ones selected
target_pred = rbind(pos.pred,unl.pred.samp)
# store the number of columns in the predictions of positive (2)
ncols = ncol(pos.pred)
# create a matrix of 1s for the positive set of uORFs and of 0s for the sample of unlabelled uORFs
class.pos <- matrix(sample(1, (ncol(pos.pred)*nrow(pos.pred)), replace=T), ncol=ncols)
class.unl <- matrix(sample(0, (ncol(unl.pred.samp)*nrow(unl.pred.samp)), replace=T), ncol=ncols)
# we bind the two matrices, and this are the expected labels of the
target_class <-rbind(class.pos,class.unl)
# this function prepares the data for the performance evaluation using ROCR library
pred <- prediction(target_pred, target_class)
# compute tpr and fpr performance measures
perf <- performance(pred,"tpr","fpr")
pred_comb <- prediction(target_pred_comb, target_class_comb)
perf_comb <- performance(pred,"tpr","fpr")
require(ggplot2)
#This ROC curve only counts the positive data (excludes neutral from the analysis).
svg("./ROC_prime111.svg")
par(mar=c(5,5,2,2),xaxs = "i",yaxs = "i",cex.axis=1.3,cex.lab=1.4)
plot(perf,col="black",lty=3, lwd=3)
auc <- performance(pred,"auc")
auc <- unlist(slot(auc, "y.values"))
auc<-round(auc, digits = 2)
auct <- paste(c("(AUC)  = "),auc,sep="")
legend(0.3,0.6,c(auct,"\n"),border="white",cex=1.7,box.col = "white")
dev.off()
setwd("..")
getwd()
