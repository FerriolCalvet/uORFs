install.packages("discretization")
require(discretization)
if (!require(discretization)){
install.packages("discretization")
}
# Requirements
if (!require(discretization)){
install.packages("discretization")
require(discretization)
} else{
require(discretization)
}
a <- getwd()
a
a <- getwd()
a
setwd("..")
a <- getwd()
a
date = Sys.Date()
date
date()
date = Sys.Date()
date
day_date = Sys.Date()
home <- getwd()
analysis_home <- paste(home,day_date, sep = "/analysis")
analysis_home
analysis_home <- paste(home,day_date, sep = "/analysis_")
analysis_home
mkdir(analysis_home)
system("ls")
system(paste("mkdir", analysis_home))
ref_home <- paste(home, "/uORFs_reference_sets/", sep = "")
uORFs_candidates <- paste(home, "/home/fcalvet/Documents/replicate_yale_analysis/data/input_sets/complete_uORFs_with_exp_homATG_phyloCSF.tsv", sep = "")
data <- read.delim(uORFs_candidates)
data <- read.delim("/home/fcalvet/Documents/replicate_yale_analysis/data/input_sets/complete_uORFs_with_exp_homATG_phyloCSF.tsv")
# choose the highest phyloCSF
head(data[37:44])
# choose the highest phyloCSF
head(data[33:37])
# choose the highest phyloCSF
head(data[33:35])
# choose the highest phyloCSF
data$phylocsf_max <- sapply(data[33:35], max)
# choose the highest phyloCSF
data$phylocsf_max <- unlist(lapply(data[33:35], max))
unlist(lapply(data[33:35], max))
# choose the highest phyloCSF
data$phylocsf_max <- apply(data[33:35], 1, max)
data$phylocsf_max
sum(data$phylocsf_max>0)
sum(data$phylocsf_max>-1)
sum(data$phylocsf_max>-3)
sum(data$phylocsf_max>-5)
sum(data$phylocsf_max>-10)
sum(data$phylocsf_max>-100)
sum(data$phylocsf_max>-1000)
names(data[40:70])
names(data[,c(9,13,18:32,36:70)])
names(data[,c(9,13,18:32)])
data <- read.delim("/home/fcalvet/Documents/replicate_yale_analysis/data/input_sets/complete_uORFs_with_exp_homATG_phyloCSF.tsv")
check_reference <- function(x){
# this function checks if a value is in the set of reference uORFs
return (x %in% positive_location)
}
# choose the highest phyloCSF
data$phylocsf_max <- apply(data[33:35], 1, max)
data$mean_expression <- rowMeans(data[40:70])
names(data[,c(9,13,18:32,39:73)])
name_ref <-"heart_science"
# Read the data from the known positive uORFs
positive_cases <- paste(ref_home, name_ref, sep = "/")
positive <- read.delim(positive_cases, header = F)
ref_home <- paste(home, "/reference_sets/", sep = "")
input_home <- paste(home, "/input/", sep = "")
# Read the data from the known positive uORFs
positive_cases <- paste(ref_home, name_ref, sep = "")
positive <- read.delim(positive_cases, header = F)
ref_home <- paste(home, "/data/reference_sets/", sep = "")
input_home <- paste(home, "/data/input/", sep = "")
name_ref <-"heart_science"
# Read the data from the known positive uORFs
positive_cases <- paste(ref_home, name_ref, sep = "")
positive <- read.delim(positive_cases, header = F)
# Paste the columns to make the intersection with location column
positive_location <- paste(paste(paste(positive$V1, positive$V2, sep = ":"), positive$V3,
sep = "-"), positive$V4, sep = ":")
data$label <- sapply(data$location, check_reference)
data$label <- as.factor(as.integer(data$label))
names(data[,c(9,13,18:32,39:74)])
cleared_dataframe <- data[,c(9,13,18:32,39:74)]
write.table(x = cleared_dataframe, file = paste(analysis_home, "/", name_ref, "_uORFs_pre_discretize.tsv", sep = ""),
sep = "\t", row.names = F)
# Combine the positive dataset and unlabeled datasets and discretize them
data <- read.delim(paste(analysis_home, "/", name_ref, "_uORFs_pre_discretize.tsv", sep = ""))
IDs <- data$uORF_id
data$uORF_id <- c()
data$exon_initiating <- c()
data$stop_initiating <- c()
colnames(data)[dim(data)[2]]  <- "class.label"
# install.packages("discretization")
library(discretization)
discretized_data <- data.frame(matrix(nrow=nrow(data), ncol=0))
max_cols <- ncol(data)
# # These are the columns with NA values
# colnames(data)[colSums(is.na(data)) > 0]
# # I am replacing NA with -1 in all the columns related with expression
# # these were the only columns with NA values, and -1 is not a possible
# # value obtained by experimental means
data[is.na(data)] = -1
for (i in 1:10){
initial <- i*5-4
if (initial+4 >= max_cols){
print(colnames(data)[initial:(max_cols-1)])
reduced_data <- data[,c(initial:(max_cols-1),max_cols)]
} else {
print(colnames(data)[initial:(initial+4)])
reduced_data <- data[,c(initial:(initial+4),max_cols)]
}
#  print(head(reduced_data))
i.disc = mdlp(reduced_data)$Disc.data
discretized_data <- cbind(discretized_data, i.disc)
print("DONE!")
}
c.lab = discretized_data["class.label"]
